def px v1
def py v2

label up #x70: "colon means don't put a close parenthesis at the end of a line
        $#x70 " dollar sign means do not put any implicit parentheses
        $#x20
        $#x70
        #xA8$ ' the dollar sign can go anywhere in the line
        $#x20
        $#x50
        $#x50; " semicolons are an alias for close a parenthesis

" labels can be defined with the label keyword
label down
include #x50 #x50 #x20 #xA8 #x70 #x20 #x70 #x70

proc if-w-pressed:
  set i up
  add py #xFF
end;

proc if-s-pressed:
  set i down
  add py 1
end;
  
macro if-a-pressed ! X ' bang means put an open parenthesis
  set i up             ' at the bang and a close parenthesis
  add px #xFF          ' at the end of a line
end;

proc main:
  set px rand #b0011111
  set py rand #b0001111
  set i up
  draw px py 8

  loop:
    draw px py 8

    ' comma is an alias for ')('
    ' it is useful for writing multiple statements
    ' on the same line
    set v0 KEY-W , eq v0 key
    call if-w-pressed

    set v0 KEY-S
    
    ' the colon can be placed anywhere in the line
    :if eq v0 key
      call if-s-pressed;

    set v0 KEY-A
    if eq v0 key:
     then
      if-a-pressed #xFF;

    set v0 KEY-D
    eq v0 key, call if-d-pressed

    draw px py 8

    loop:
      set ve dt
      neq ve 0
    end;

    set ve 3
    set dt ve
  end;
end;  ' use end; when ending a scope on a newline

proc if-d-pressed:
  set i up
  add px 1
end;

' macros can be defined anywhere
' macros can have types.

' the 'atom' type passes the given argument literally.
' the label builtin will check the for any defined atoms when making a label
' the atom type can also be used to pass macro names

' the body type must be the last argument.
' a grouping of statements will be bound to body

macro my-proc ! [name atom] [b body]
  label name
  b
end;

' my-proc just-a-test:
'   draw v1 v2 8
'   draw v1 v2 8
' ret;

' NOTE: while you can use this macro.
' the pc generated from the label will be wrong (at the time of writing)
' this should get fixed in the upcoming rewrite