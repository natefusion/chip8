(defun dump (opcode)
  (let ((nnn (chop opcode 12))
        (nn  (chop opcode 8))
        (n   (chop opcode 4))
        (x   (chop opcode 4 8))
        (y   (chop opcode 4 4))
        (w   (chop opcode 4 12)))
    (match (list w x y n)
      ((0 0 #xE #x0) "CLEAR")
      ((0 0 #xE #xE) "RET")
      ((1 _ _ _) (format nil "JUMP ~X" nnn))
      ((2 _ _ _) (format nil "CALL ~X" nnn))
      ((3 _ _ _) (format nil "NEQ V~X ~X" x nn))
      ((4 _ _ _) (format nil "EQ V~X V~X" x y))
      ((5 _ _ _) (format nil "NEQ V~X V~X" x y))
      ((6 _ _ _) (format nil "SET V~X ~X" x nn))
      ((7 _ _ _) (format nil "ADD V~X ~X" x nn))
      ((8 _ _ 0) (format nil "SET V~X V~X" x y))
      ((8 _ _ 1) (format nil "OR V~X V~X" x y))
      ((8 _ _ 2) (format nil "AND V~X V~X" x y))
      ((8 _ _ 3) (format nil "XOR V~X V~X" x y))
      ((8 _ _ 4) (format nil "ADD V~X V~X" x y))
      ((8 _ _ 5) (format nil "SUB V~X V~X" x y))
      ((8 _ _ 6) (format nil "SHR V~X V~X" x y))
      ((8 _ _ 7) (format nil "SUBN V~X V~X" x y))
      ((8 _ _ #xE) (format nil "SHL V~X V~X" x y))
      ((9 _ _ 0) (format nil "EQ V~X V~X" x y))
      ((#xA _ _ _) (format nil "SET I ~X" nnn))
      ((#xB _ _ _) (format nil "JUMP0 ~X" nnn))
      ((#xC _ _ _) (format nil "RAND V~X ~X" x nn))
      ((#xD _ _ _) (format nil "DRAW V~X V~X ~X" x y n))
      ((#xE _ #x9 #xE) (format nil "NEQ V~X KEY" x))
      ((#xE _ #xA #x1) (format nil "EQ V~X KEY" x))
      ((#xF _ 0 7) (format nil "SET V~X DT" x))
      ((#xF _ 0 #xA) (format nil "SET V~X KEY" x))
      ((#xF _ 1 #x5) (format nil "SET DT V~X" x))
      ((#xF _ 1 #x8) (format nil "SET V~X ST" x))
      ((#xF _ 1 #xE) (format nil "ADD I V~X" x))
      ((#xF _ 2 #x9) (format nil "SET I V~X" x))
      ((#xF _ 3 3) (format nil "BCD V~X" x))
      ((#xF _ 5 5) (format nil "WRITE V~X" x))
      ((#xF _ 5 5) (format nil "READ V~X" x))
      (otherwise (format nil "~X" opcode)))))

(defun c8-read (filename)
  (with-open-file (f filename :element-type 'unsigned-byte)
    (c8-dasm f)))

(defun c8-dasm (f)
  (loop for one = (read-byte f nil)
        for two = (read-byte f nil)
        while (and one two)
        for ins = (dump (dpb one (byte 8 8) two))
        do (print ins)))
